let s:suite = themis#suite('vmock#expect')
let s:assert = themis#helper('assert')

function! s:suite.once()
  let counter = vmock#matcher#count#once()
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
endfunction

function! s:suite.times()
  let counter = vmock#matcher#count#times(3)
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
endfunction

function! s:suite.at_least()
  let counter = vmock#matcher#count#at_least(2)
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
endfunction

function! s:suite.at_most()
  let counter = vmock#matcher#count#at_most(2)
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
endfunction

function! s:suite.any()
  let counter = vmock#matcher#count#any()
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.true(counter.validate())
  call counter.called()
endfunction

function! s:suite.never()
  let counter = vmock#matcher#count#never()
  call s:assert.true(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
  call s:assert.false(counter.validate())
  call counter.called()
endfunction
